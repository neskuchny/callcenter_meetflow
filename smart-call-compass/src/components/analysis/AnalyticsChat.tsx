import React, { useState, useEffect, useRef, Component, ErrorInfo, ReactNode } from "react";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Loader2, Send, Brain, Filter, X, Calendar as CalendarIcon } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Call } from "@/components/calls/CallsTable";
import { fetchCalls } from "@/lib/api";
import { globalState, EVENTS, CallsUpdatedEvent, DataSourceChangedEvent, AnalysisCompletedEvent } from "@/lib/globalState";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { format } from "date-fns";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ErrorBoundary –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
class ErrorBoundary extends Component<{children: ReactNode, fallback?: ReactNode}> {
  state = { hasError: false, error: null };

  static getDerivedStateFromError(error: any) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Error in component:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="p-4 border rounded bg-red-50 text-red-500">
          <h3 className="font-medium">–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</h3>
          <p className="text-sm">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞</p>
        </div>
      );
    }

    return this.props.children;
  }
}

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
const SimpleDatePicker = ({ value, onChange }: { value: Date | undefined, onChange: (date: Date | undefined) => void }) => {
  return (
    <div className="flex flex-col gap-2">
      <div className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</div>
      <input 
        type="date" 
        value={value ? format(value, "yyyy-MM-dd") : ''} 
        onChange={(e) => {
          const date = e.target.value ? new Date(e.target.value) : undefined;
          onChange(date);
        }}
        className="px-3 py-2 border rounded"
      />
    </div>
  );
};

interface ChatMessage {
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
  isLoading?: boolean;
}

interface AnalyticsChatProps {
  dashboardData?: any;
}

const AnalyticsChat: React.FC<AnalyticsChatProps> = ({ dashboardData }) => {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      role: "assistant",
      content: "–ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–Ω–∫–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?",
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [calls, setCalls] = useState<Call[]>([]);
  const [filteredCalls, setFilteredCalls] = useState<Call[]>([]);
  const [callsLoaded, setCallsLoaded] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [statusFilter, setStatusFilter] = useState<string>("");
  const [operatorFilter, setOperatorFilter] = useState<string>("");
  const [dateFilter, setDateFilter] = useState<Date | undefined>(undefined);
  const [durationFilter, setDurationFilter] = useState<string>("");
  const [tagFilter, setTagFilter] = useState<string>("");
  const [showFilters, setShowFilters] = useState<boolean>(false);
  
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å—ã
  const [uniqueOperators, setUniqueOperators] = useState<string[]>([]);
  const [uniqueStatuses, setUniqueStatuses] = useState<string[]>([]);
  const [uniqueTags, setUniqueTags] = useState<string[]>([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    async function loadCalls(useGlobalState = true) {
      try {
        let callsData: Call[];
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (useGlobalState) {
          const currentCalls = globalState.getCurrentCalls();
          if (currentCalls.length > 0) {
            console.log('üí¨ AnalyticsChat: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            callsData = currentCalls;
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
            callsData = await fetchCalls();
          }
        } else {
          callsData = await fetchCalls();
        }
        
        setCalls(callsData);
        setFilteredCalls(callsData);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const operators = Array.from(new Set(callsData.map(call => call.agent || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")));
        const statuses = Array.from(new Set(callsData.map(call => 
          call.callResult ? call.callResult : call.status || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        )));
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ –∑–≤–æ–Ω–∫–æ–≤
        const allTags: string[] = [];
        callsData.forEach(call => {
          if (call.tags && Array.isArray(call.tags)) {
            allTags.push(...call.tags);
          } else if (call.tag) {
            allTags.push(call.tag);
          }
        });
        const tags = Array.from(new Set(allTags)).filter(tag => tag && tag !== "");
        
        setUniqueOperators(operators);
        setUniqueStatuses(statuses);
        setUniqueTags(tags);
        setCallsLoaded(true);
      } catch (err) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–∞—Ö:", err);
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    loadCalls();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const handleCallsUpdated = (event: CallsUpdatedEvent) => {
      console.log('üí¨ AnalyticsChat: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤');
      const callsData = event.detail.calls;
      setCalls(callsData);
      setFilteredCalls(callsData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      const operators = Array.from(new Set(callsData.map(call => call.agent || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")));
      const statuses = Array.from(new Set(callsData.map(call => 
        call.callResult ? call.callResult : call.status || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
      )));
      const tags = Array.from(new Set(callsData.flatMap(call => 
        Array.isArray(call.tags) ? call.tags : []
      )));
      
      setUniqueOperators(operators);
      setUniqueStatuses(statuses);
      setUniqueTags(tags);
    };

    const handleDataSourceChanged = (event: DataSourceChangedEvent) => {
      console.log(`üí¨ AnalyticsChat: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${event.detail.source}`);
      const callsData = event.detail.calls;
      setCalls(callsData);
      setFilteredCalls(callsData);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      setStatusFilter("");
      setOperatorFilter("");
      setDateFilter(undefined);
      setDurationFilter("");
      setTagFilter("");
    };

    const handleAnalysisCompleted = (event: AnalysisCompletedEvent) => {
      console.log('üí¨ AnalyticsChat: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞');
      const callsData = event.detail.allCalls;
      setCalls(callsData);
      setFilteredCalls(callsData);
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
    window.addEventListener(EVENTS.CALLS_UPDATED, handleCallsUpdated as EventListener);
    window.addEventListener(EVENTS.DATA_SOURCE_CHANGED, handleDataSourceChanged as EventListener);
    window.addEventListener(EVENTS.ANALYSIS_COMPLETED, handleAnalysisCompleted as EventListener);

    // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener(EVENTS.CALLS_UPDATED, handleCallsUpdated as EventListener);
      window.removeEventListener(EVENTS.DATA_SOURCE_CHANGED, handleDataSourceChanged as EventListener);
      window.removeEventListener(EVENTS.ANALYSIS_COMPLETED, handleAnalysisCompleted as EventListener);
    };
  }, []);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (!callsLoaded) return;
    
    try {
      let filtered = [...calls];
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (statusFilter) {
        filtered = filtered.filter(call => {
          const status = call.callResult || call.status || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
          return status.toLowerCase() === statusFilter.toLowerCase();
        });
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
      if (operatorFilter) {
        filtered = filtered.filter(call => {
          const operator = call.agent || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
          return operator.toLowerCase() === operatorFilter.toLowerCase();
        });
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (dateFilter) {
        try {
          const dateString = format(dateFilter, "dd.MM.yyyy");
          filtered = filtered.filter(call => call.date === dateString);
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ:", err);
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É, –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        }
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
      if (durationFilter) {
        filtered = filtered.filter(call => {
          if (!call.duration) return false;
          
          // –†–∞—Å–ø–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X–º Y—Å" –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
          let minutes = 0;
          let seconds = 0;
          
          if (typeof call.duration === 'string') {
            const minMatch = call.duration.match(/(\d+)–º/);
            const secMatch = call.duration.match(/(\d+)—Å/);
            
            if (minMatch) minutes = parseInt(minMatch[1], 10);
            if (secMatch) seconds = parseInt(secMatch[1], 10);
          } else if (typeof call.duration === 'number') {
            minutes = Math.floor(call.duration);
            seconds = Math.round((call.duration - minutes) * 60);
          }
          
          // –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
          const totalSeconds = minutes * 60 + seconds;
          
          // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
          switch (durationFilter) {
            case "short": // –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–≤–æ–Ω–∫–∏ (–¥–æ 1 –º–∏–Ω—É—Ç—ã)
              return totalSeconds < 60;
            case "medium": // –°—Ä–µ–¥–Ω–∏–µ –∑–≤–æ–Ω–∫–∏ (–æ—Ç 1 –¥–æ 3 –º–∏–Ω—É—Ç)
              return totalSeconds >= 60 && totalSeconds <= 180;
            case "long": // –î–ª–∏–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ (–±–æ–ª—å—à–µ 3 –º–∏–Ω—É—Ç)
              return totalSeconds > 180;
            default:
              return true;
          }
        });
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É
      if (tagFilter) {
        filtered = filtered.filter(call => {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
          if (call.tags && Array.isArray(call.tags)) {
            return call.tags.some(tag => 
              tag.toLowerCase() === tagFilter.toLowerCase()
            );
          }
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ–≥
          if (call.tag) {
            return call.tag.toLowerCase() === tagFilter.toLowerCase();
          }
          return false;
        });
      }
      
      setFilteredCalls(filtered);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:", error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫
      setFilteredCalls(calls);
    }
  }, [statusFilter, operatorFilter, dateFilter, durationFilter, tagFilter, calls, callsLoaded]);

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetFilters = () => {
    setStatusFilter("");
    setOperatorFilter("");
    setDateFilter(undefined);
    setDurationFilter("");
    setTagFilter("");
  };

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: ChatMessage = {
      role: "user",
      content: inputValue,
      timestamp: new Date(),
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const loadingMessage: ChatMessage = {
      role: "assistant",
      content: "",
      timestamp: new Date(),
      isLoading: true,
    };

    setMessages((prev) => [...prev, userMessage, loadingMessage]);
    setInputValue("");
    setIsLoading(true);

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞—Å–∞–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const isCallSpecificQuery = 
        inputValue.toLowerCase().includes("–∑–≤–æ–Ω–æ–∫") || 
        inputValue.toLowerCase().includes("—Ä–∞–∑–≥–æ–≤–æ—Ä") || 
        inputValue.toLowerCase().includes("—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è");

      let response;
      let analyzedCalls;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–≤—ã—Ö N –∑–≤–æ–Ω–∫–æ–≤
      const callsToAnalyze = filteredCalls.length > 0 ? filteredCalls : calls;
      // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ
      const selectedCalls = callsToAnalyze.slice(0, Math.min(5, callsToAnalyze.length));

      if (isCallSpecificQuery && selectedCalls.length > 0) {
        // –ë–µ—Ä–µ–º ID –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–≤—ã—Ö N –∑–≤–æ–Ω–∫–æ–≤
        const callIds = selectedCalls.map(call => call.id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è fetch –≤–º–µ—Å—Ç–æ axios
        response = await fetch("http://localhost:5000/api/custom-analyze", {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            callIds,
            prompt: inputValue
          })
        });
        
        const responseData = await response.json();
        analyzedCalls = responseData.calls;
        const overallSummary = responseData.result;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        let assistantResponse = "";

        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (overallSummary) {
          assistantResponse += `${overallSummary}\n\n`;
        }
        
        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–≤–æ–Ω–∫—É
        if (analyzedCalls && analyzedCalls.length > 0) {
          assistantResponse += `–î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º:\n`;
          analyzedCalls.forEach((analyzedCall: any, index: number) => {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            const originalCall = calls.find(c => c.id === analyzedCall.id) || selectedCalls.find(c => c.id === analyzedCall.id);
            const callDetails = originalCall ? 
              `[ID: ${originalCall.id}, ${originalCall.date || "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}, ${originalCall.agent || "–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω"}, ${originalCall.status || originalCall.callResult || "–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω"}]` : 
              `[ID: ${analyzedCall.id}]`;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'analysis' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const analysisContent = typeof analyzedCall.analysis === 'string' ? analyzedCall.analysis : JSON.stringify(analyzedCall.analysis, null, 2);
            assistantResponse += `\nüìû **–ó–≤–æ–Ω–æ–∫ ${callDetails}**: \n${analysisContent || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–Ω–∞–ª–∏–∑—É"}\n`;
          });
        } else if (!overallSummary) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–±—â–µ–π —Å–≤–æ–¥–∫–∏, –Ω–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∑–≤–æ–Ω–∫–∞–º
          assistantResponse = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.";
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        setMessages((prev) => prev.slice(0, -1));

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const assistantMessage: ChatMessage = {
          role: "assistant",
          content: assistantResponse,
          timestamp: new Date(),
        };

        setMessages((prev) => [...prev, assistantMessage]);
      } else {
        // –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
        let assistantResponse = "";

        if (dashboardData) {
          // –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
          if (inputValue.toLowerCase().includes("—É—Å–ø–µ—à–Ω")) {
            const successRate = dashboardData.successRate || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
            assistantResponse = `üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${successRate}%`;
          } else if (inputValue.toLowerCase().includes("–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç")) {
            const avgDuration = dashboardData.avgDuration || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
            assistantResponse = `‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤: ${avgDuration}`;
          } else if (inputValue.toLowerCase().includes("–æ–±—â") && inputValue.toLowerCase().includes("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")) {
            assistantResponse = "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–≤–æ–Ω–∫–∞–º:\n\n";
            
            if (dashboardData.totalCalls) 
              assistantResponse += `- –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: ${dashboardData.totalCalls}\n`;
            if (dashboardData.successRate) 
              assistantResponse += `- –£—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${dashboardData.successRate}%\n`;
            if (dashboardData.unsuccessRate) 
              assistantResponse += `- –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: ${dashboardData.unsuccessRate}%\n`;
            if (dashboardData.avgDuration) 
              assistantResponse += `- –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${dashboardData.avgDuration}\n`;
          } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º custom-analyze —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–≤–æ–Ω–∫–∞–º–∏
            const callIds = selectedCalls.map(call => call.id);
            
            response = await fetch("http://localhost:5000/api/custom-analyze", {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                callIds,
                prompt: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${inputValue}`
              })
            });
            
            const responseData = await response.json();
            analyzedCalls = responseData.calls;
            const summaryFromApi = responseData.result;
            let analysisDetailsFromApi = "";

            if (responseData.calls && responseData.calls.length > 0 && responseData.calls[0].analysis) {
                analysisDetailsFromApi = typeof responseData.calls[0].analysis === 'string' 
                    ? responseData.calls[0].analysis
                    : JSON.stringify(responseData.calls[0].analysis, null, 2);
            } else if (responseData.calls && responseData.calls.length > 0 && responseData.calls[0].customResponse) { // Fallback
                 analysisDetailsFromApi = responseData.calls[0].customResponse;
            }
            
            if (summaryFromApi) {
              assistantResponse = summaryFromApi;
              if(analysisDetailsFromApi && !summaryFromApi.includes(analysisDetailsFromApi.substring(0,50))) {
                 assistantResponse += `\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: \n${analysisDetailsFromApi}`;
              }
            } else if (analysisDetailsFromApi){
              assistantResponse = analysisDetailsFromApi;
            }
            else {
              assistantResponse = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.";
            }
          }
        } else {
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ API
          const callIds = selectedCalls.map(call => call.id);
          
          response = await fetch("http://localhost:5000/api/custom-analyze", {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              callIds,
              prompt: inputValue
            })
          });
          
          const responseData = await response.json();
          analyzedCalls = responseData.calls;
          const summaryFromApi = responseData.result;
          let analysisDetailsFromApi = "";

          if (responseData.calls && responseData.calls.length > 0 && responseData.calls[0].analysis) {
              analysisDetailsFromApi = typeof responseData.calls[0].analysis === 'string' 
                  ? responseData.calls[0].analysis
                  : JSON.stringify(responseData.calls[0].analysis, null, 2);
          } else if (responseData.calls && responseData.calls.length > 0 && responseData.calls[0].customResponse) { // Fallback
               analysisDetailsFromApi = responseData.calls[0].customResponse;
          }
          
          if (summaryFromApi) {
            assistantResponse = summaryFromApi;
            if(analysisDetailsFromApi && !summaryFromApi.includes(analysisDetailsFromApi.substring(0,50))) {
               assistantResponse += `\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: \n${analysisDetailsFromApi}`;
            }
          } else if (analysisDetailsFromApi){
            assistantResponse = analysisDetailsFromApi;
          }
          else {
            assistantResponse = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.";
          }
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        setMessages((prev) => prev.slice(0, -1));

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const assistantMessage: ChatMessage = {
          role: "assistant",
          content: assistantResponse,
          timestamp: new Date(),
        };

        setMessages((prev) => [...prev, assistantMessage]);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", error);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
      setMessages((prev) => prev.slice(0, -1));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage: ChatMessage = {
        role: "assistant",
        content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        timestamp: new Date(),
      };
      
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter" && !isLoading) {
      handleSendMessage();
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –º–∞—Ä–∫–¥–∞—É–Ω–∞)
  const formatMessage = (message: string) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    const withLineBreaks = message.split("\n").map((line, i) => (
      <React.Fragment key={i}>
        {line}
        {i < message.split("\n").length - 1 && <br />}
      </React.Fragment>
    ));

    return withLineBreaks;
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const formatTimestamp = (date: Date) => {
    return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç
  const handleDateSelect = (date: Date | undefined) => {
    try {
      if (date && isNaN(date.getTime())) {
        console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞:", date);
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
      }
      setDateFilter(date);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã:", error);
    }
  };

  return (
    <Card className="flex flex-col h-[calc(100vh-220px)] min-h-[500px]">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-primary" />
            <CardTitle>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç</CardTitle>
          </div>
          
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => setShowFilters(!showFilters)}
          >
            <Filter className="h-4 w-4 mr-2" />
            {showFilters ? "–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã" : "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"}
          </Button>
        </div>
        
        {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        {showFilters && (
          <div className="mt-4 p-3 bg-slate-50 rounded-md flex flex-wrap gap-3 items-center">
            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
            <div className="flex flex-col gap-1">
              <span className="text-xs text-muted-foreground">–°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞</span>
              <ErrorBoundary>
                <Select value={statusFilter} onValueChange={setStatusFilter}>
                  <SelectTrigger className="w-[150px]">
                    <SelectValue placeholder="–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</SelectItem>
                    {uniqueStatuses.map((status) => (
                      <SelectItem key={status} value={status}>{status}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </ErrorBoundary>
            </div>
            
            {/* –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É */}
            <div className="flex flex-col gap-1">
              <span className="text-xs text-muted-foreground">–û–ø–µ—Ä–∞—Ç–æ—Ä</span>
              <ErrorBoundary>
                <Select value={operatorFilter} onValueChange={setOperatorFilter}>
                  <SelectTrigger className="w-[150px]">
                    <SelectValue placeholder="–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã</SelectItem>
                    {uniqueOperators.map((operator) => (
                      <SelectItem key={operator} value={operator}>{operator}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </ErrorBoundary>
            </div>
            
            {/* –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ - —Ç–µ–ø–µ—Ä—å —Å ErrorBoundary –∏ –∑–∞–ø–∞—Å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º */}
            <div className="flex flex-col gap-1">
              <span className="text-xs text-muted-foreground">–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞</span>
              <ErrorBoundary fallback={<SimpleDatePicker value={dateFilter} onChange={handleDateSelect} />}>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" className="w-[150px] justify-start text-left font-normal">
                      {dateFilter ? (
                        format(dateFilter, "dd.MM.yyyy")
                      ) : (
                        <span className="text-muted-foreground">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={dateFilter}
                      onSelect={handleDateSelect}
                      disabled={(date) => {
                        // –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç –≤ –±—É–¥—É—â–µ–º
                        return date > new Date();
                      }}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </ErrorBoundary>
            </div>
            
            {/* –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞ */}
            <div className="flex flex-col gap-1">
              <span className="text-xs text-muted-foreground">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞</span>
              <ErrorBoundary>
                <Select value={durationFilter} onValueChange={setDurationFilter}>
                  <SelectTrigger className="w-[150px]">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</SelectItem>
                    <SelectItem value="short">–î–æ 1 –º–∏–Ω—É—Ç—ã</SelectItem>
                    <SelectItem value="medium">–û—Ç 1 –¥–æ 3 –º–∏–Ω—É—Ç</SelectItem>
                    <SelectItem value="long">–ë–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç</SelectItem>
                  </SelectContent>
                </Select>
              </ErrorBoundary>
            </div>
            
            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É */}
            <div className="flex flex-col gap-1">
              <span className="text-xs text-muted-foreground">–¢–µ–≥</span>
              <ErrorBoundary>
                <Select value={tagFilter} onValueChange={setTagFilter}>
                  <SelectTrigger className="w-[150px]">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥</SelectItem>
                    {uniqueTags.map((tag) => (
                      <SelectItem key={tag} value={tag}>{tag}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </ErrorBoundary>
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex items-end h-full ml-auto">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={resetFilters}
                className="ml-auto"
              >
                <X className="h-4 w-4 mr-2" />
                –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </Button>
            </div>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ */}
            <div className="w-full mt-2">
              <Badge variant="outline" className="px-2 py-1">
                –ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {filteredCalls.length} –∏–∑ {calls.length}
              </Badge>
            </div>
          </div>
        )}
      </CardHeader>
      <CardContent className="flex-grow p-0">
        <ScrollArea className="h-full px-4">
          <div className="space-y-4 pt-1 pb-3">
            {messages.map((message, index) => (
              <div
                key={index}
                className={`flex ${
                  message.role === "user" ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`flex gap-3 max-w-[80%] ${
                    message.role === "user" ? "flex-row-reverse" : ""
                  }`}
                >
                  <Avatar className="h-8 w-8">
                    {message.role === "assistant" ? (
                      <AvatarImage src="/ai-avatar.png" alt="AI" />
                    ) : (
                      <AvatarImage src="/user-avatar.png" alt="User" />
                    )}
                    <AvatarFallback>
                      {message.role === "assistant" ? "AI" : "U"}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <div
                      className={`rounded-lg p-3 ${
                        message.role === "user"
                          ? "bg-primary text-primary-foreground"
                          : "bg-muted"
                      }`}
                    >
                      {message.isLoading ? (
                        <Loader2 className="h-5 w-5 animate-spin" />
                      ) : (
                        <div className="text-sm">{formatMessage(message.content)}</div>
                      )}
                    </div>
                    <div
                      className={`text-xs text-muted-foreground mt-1 ${
                        message.role === "user" ? "text-right" : ""
                      }`}
                    >
                      {formatTimestamp(message.timestamp)}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>
      </CardContent>
      <CardFooter className="pt-0">
        <div className="flex w-full items-center space-x-2">
          <Input
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
            value={inputValue}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
            disabled={isLoading || !callsLoaded}
            className="flex-1"
          />
          <Button 
            onClick={handleSendMessage} 
            disabled={isLoading || !inputValue.trim() || !callsLoaded}
            size="icon"
          >
            {isLoading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Send className="h-4 w-4" />
            )}
          </Button>
        </div>
      </CardFooter>
    </Card>
  );
};

export default AnalyticsChat; 