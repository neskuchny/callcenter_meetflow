import React, { useState, useEffect } from "react";
import StatCard from "@/components/dashboard/StatCard";
import AnalyticsChart from "@/components/dashboard/AnalyticsChart";

import TrainingRecommendations from "@/components/dashboard/TrainingRecommendations";
import IssuesTable from "@/components/dashboard/IssuesTable";
import ChatAnalytics from "@/components/dashboard/ChatAnalytics";
import CallsTable, { Call } from "@/components/calls/CallsTable";
import CallsComparison from "@/components/calls/CallsComparison";
import AlertsSystem from "@/components/calls/AlertsSystem";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ChartBar, CheckCircle, Clock, FileText, Phone, XCircle, Brain, Loader2, Users } from "lucide-react";
import { fetchCalls, getAnalyzedCalls } from "@/lib/api";
import { globalState, EVENTS, CallsUpdatedEvent, DataSourceChangedEvent, AnalysisCompletedEvent } from "@/lib/globalState";
import { TabsContent, TabsList, TabsTrigger, Tabs } from "@/components/ui/tabs";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import { useToast } from "@/hooks/use-toast";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
interface DashboardUpdateEvent extends Event {
  detail?: {
    calls?: Call[];
  };
}

const Dashboard = () => {
  const { toast } = useToast();
  const [calls, setCalls] = useState<Call[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState("overview");
  const [selectedCallsForComparison, setSelectedCallsForComparison] = useState<Call[]>([]);
  const [statsData, setStatsData] = useState([
  {
    title: "–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤",
      value: "0",
    icon: <Phone className="h-4 w-4 text-muted-foreground" />,
      trend: { value: 0, isPositive: true },
  },
  {
    title: "–£—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤",
      value: "0%",
    icon: <CheckCircle className="h-4 w-4 text-success" />,
      trend: { value: 0, isPositive: true },
  },
  {
    title: "–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤",
      value: "0%",
    icon: <XCircle className="h-4 w-4 text-destructive" />,
      trend: { value: 0, isPositive: false },
  },
  {
    title: "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      value: "0–º 0—Å",
    icon: <Clock className="h-4 w-4 text-muted-foreground" />,
      trend: { value: 0, isPositive: true },
    },
  ]);
  const [chartData, setChartData] = useState([
    { name: "–ü–Ω", —É—Å–ø–µ—à–Ω—ã–µ: 0, –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ: 0, "—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è": 0 },
    { name: "–í—Ç", —É—Å–ø–µ—à–Ω—ã–µ: 0, –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ: 0, "—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è": 0 },
    { name: "–°—Ä", —É—Å–ø–µ—à–Ω—ã–µ: 0, –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ: 0, "—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è": 0 },
    { name: "–ß—Ç", —É—Å–ø–µ—à–Ω—ã–µ: 0, –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ: 0, "—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è": 0 },
    { name: "–ü—Ç", —É—Å–ø–µ—à–Ω—ã–µ: 0, –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ: 0, "—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è": 0 },
  ]);
  const [issuesData, setIssuesData] = useState<Array<{ id: number; issue: string; count: number; impact: "high" | "low" | "medium" }>>([
    { id: 1, issue: "–ó–∞–≥—Ä—É–∑–∫–∞...", count: 0, impact: "medium" },
  ]);
  const [successData, setSuccessData] = useState<Array<{ id: number; issue: string; count: number; impact: "high" | "low" | "medium" }>>([
    { id: 1, issue: "–ó–∞–≥—Ä—É–∑–∫–∞...", count: 0, impact: "medium" },
  ]);
  const [recentCalls, setRecentCalls] = useState<Call[]>([]);
  const [llmAnalysis, setLlmAnalysis] = useState({
    title: "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–æ–≤",
    summary: "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
    insights: [
      {
        title: "–ó–∞–≥—Ä—É–∑–∫–∞",
        content: "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞..."
      }
    ]
  });


  
  // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  const [managersData, setManagersData] = useState<Array<{
    name: string;
    —É—Å–ø–µ—à–Ω—ã–µ: number;
    —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: number;
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: number;
  }>>([]);
  
  // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–ª–∏—è–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  const [durationData, setDurationData] = useState<Array<{
    name: string;
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: number;
    –∫–æ–Ω–≤–µ—Ä—Å–∏—è: number;
    —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: number;
  }>>([]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const handleSelectCallForComparison = (call: Call) => {
    // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if (selectedCallsForComparison.some(c => c.id === call.id)) {
      setSelectedCallsForComparison(selectedCallsForComparison.filter(c => c.id !== call.id));
    } 
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –º–µ–Ω—å—à–µ 5 –∑–≤–æ–Ω–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    else if (selectedCallsForComparison.length < 5) {
      setSelectedCallsForComparison([...selectedCallsForComparison, call]);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
  const loadAndProcessCalls = async (showToasts = false, useGlobalState = true) => {
    try {
      setIsLoading(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (useGlobalState) {
        const currentCalls = globalState.getCurrentCalls();
        const currentSource = globalState.getDataSource();
        console.log(`üìä Dashboard: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –Ω–∞–π–¥–µ–Ω–æ ${currentCalls.length} –∑–≤–æ–Ω–∫–æ–≤ (–∏—Å—Ç–æ—á–Ω–∏–∫: ${currentSource})`);
        
        if (currentCalls.length > 0) {
          console.log(`üìä Dashboard: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (${currentCalls.length} –∑–≤–æ–Ω–∫–æ–≤, –∏—Å—Ç–æ—á–Ω–∏–∫: ${currentSource})`);
          setCalls(currentCalls);
          processCallsData(currentCalls);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–≤–æ–Ω–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const callsForComparison = currentCalls.filter(call => 
            call.keyInsight && call.keyInsight !== '' && 
            call.score !== undefined && call.score > 0
          );
          if (callsForComparison.length >= 2 && selectedCallsForComparison.length === 0) {
            setSelectedCallsForComparison(callsForComparison.slice(0, Math.min(3, callsForComparison.length)));
            console.log(`üìä Dashboard: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ ${Math.min(3, callsForComparison.length)} –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è`);
          }
          
          setIsLoading(false);
          
          if (showToasts) {
            toast({
              title: "–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω",
              description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${currentCalls.length} –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (${currentSource})`,
            });
          }
          return;
        } else {
          console.log('üìä Dashboard: –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API');
        }
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤–æ–Ω–∫–∏ –∏–∑ API (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const currentSource = globalState.getDataSource();
      let callsData = await fetchCalls(currentSource);
      console.log(`üìä Dashboard: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º ${currentSource}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
      const analyzedCalls = getAnalyzedCalls();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      if (analyzedCalls.length > 0) {
        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –ø–æ ID
        const analyzedCallsMap = new Map(analyzedCalls.map(call => [call.id, call]));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        callsData = callsData.map(call => {
          const analyzedCall = analyzedCallsMap.get(call.id);
          if (analyzedCall) {
            // –ï—Å–ª–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            return {
              ...call,
              aiSummary: analyzedCall.aiSummary || call.aiSummary,
              keyInsight: analyzedCall.keyInsight || call.keyInsight,
              recommendation: analyzedCall.recommendation || call.recommendation,
              score: analyzedCall.score || call.score,
              callType: analyzedCall.callType || call.callType,
              callResult: analyzedCall.callResult || call.callResult,
              tags: analyzedCall.tags || call.tags,
              supportingQuote: analyzedCall.supportingQuote || call.supportingQuote,
              objections: analyzedCall.objections || call.objections,
              rejectionReasons: analyzedCall.rejectionReasons || call.rejectionReasons,
              painPoints: analyzedCall.painPoints || call.painPoints,
              customerRequests: analyzedCall.customerRequests || call.customerRequests,
              managerPerformance: analyzedCall.managerPerformance || call.managerPerformance,
              customerPotential: analyzedCall.customerPotential || call.customerPotential,
              salesReadiness: analyzedCall.salesReadiness || call.salesReadiness,
              conversionProbability: analyzedCall.conversionProbability || call.conversionProbability,
              nextSteps: analyzedCall.nextSteps || call.nextSteps,
              keyQuestion1Answer: analyzedCall.keyQuestion1Answer || call.keyQuestion1Answer,
              keyQuestion2Answer: analyzedCall.keyQuestion2Answer || call.keyQuestion2Answer,
              keyQuestion3Answer: analyzedCall.keyQuestion3Answer || call.keyQuestion3Answer,
              clientInterests: analyzedCall.clientInterests || call.clientInterests,
              decisionFactors: analyzedCall.decisionFactors || call.decisionFactors
            };
          }
          return call;
        });
        
        console.log(`–û–±–æ–≥–∞—â–µ–Ω–æ ${callsData.length} –∑–≤–æ–Ω–∫–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ localStorage`);
      }
      
      setCalls(callsData);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–≤–æ–Ω–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∏–∑ API)
      const callsForComparison = callsData.filter(call => 
        call.keyInsight && call.keyInsight !== '' && 
        call.score !== undefined && call.score > 0
      );
      if (callsForComparison.length >= 2 && selectedCallsForComparison.length === 0) {
        setSelectedCallsForComparison(callsForComparison.slice(0, Math.min(3, callsForComparison.length)));
        console.log(`üìä Dashboard: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ ${Math.min(3, callsForComparison.length)} –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∏–∑ API)`);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Dashboard
      processCallsData(callsData);
      
      if (showToasts) {
        toast({
          title: "–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω",
          description: `–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ${callsData.length} –∑–≤–æ–Ω–∫–æ–≤`
        });
      }
      
    } catch (err) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–∞—Ö");
      console.error(err);
      
      if (showToasts) {
        toast({
          title: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞",
          variant: "destructive"
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    loadAndProcessCalls();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const handleCallsUpdated = (event: CallsUpdatedEvent) => {
      console.log(`üìä Dashboard: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ (${event.detail.calls.length} –∑–∞–ø–∏—Å–µ–π, –∏—Å—Ç–æ—á–Ω–∏–∫: ${event.detail.source})`);
      setCalls(event.detail.calls);
      processCallsData(event.detail.calls);
    };

    const handleDataSourceChanged = (event: DataSourceChangedEvent) => {
      console.log(`üìä Dashboard: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${event.detail.source} (${event.detail.calls.length} –∑–∞–ø–∏—Å–µ–π)`);
      setCalls(event.detail.calls);
      processCallsData(event.detail.calls);
    };

    const handleAnalysisCompleted = (event: AnalysisCompletedEvent) => {
      console.log(`üìä Dashboard: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ (${event.detail.allCalls.length} –∑–≤–æ–Ω–∫–æ–≤)`);
      setCalls(event.detail.allCalls);
      processCallsData(event.detail.allCalls);
      toast({
        title: "–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω",
        description: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —Å —É—á–µ—Ç–æ–º ${event.detail.analyzedCalls.length} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤`,
      });
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
    window.addEventListener(EVENTS.CALLS_UPDATED, handleCallsUpdated as EventListener);
    window.addEventListener(EVENTS.DATA_SOURCE_CHANGED, handleDataSourceChanged as EventListener);
    window.addEventListener(EVENTS.ANALYSIS_COMPLETED, handleAnalysisCompleted as EventListener);

    // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener(EVENTS.CALLS_UPDATED, handleCallsUpdated as EventListener);
      window.removeEventListener(EVENTS.DATA_SOURCE_CHANGED, handleDataSourceChanged as EventListener);
      window.removeEventListener(EVENTS.ANALYSIS_COMPLETED, handleAnalysisCompleted as EventListener);
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
    const handleDashboardUpdate = (event: DashboardUpdateEvent) => {
      console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞", event);
      
      // –ï—Å–ª–∏ –≤ —Å–æ–±—ã—Ç–∏–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∑–≤–æ–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (event.detail?.calls) {
        console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", event.detail.calls.length);
        setCalls(event.detail.calls);
        processCallsData(event.detail.calls);
      } else {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
        console.log("–ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
        const currentCalls = globalState.getCurrentCalls();
        if (currentCalls.length > 0) {
          setCalls(currentCalls);
          processCallsData(currentCalls);
        } else {
          loadAndProcessCalls(true, false); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        }
      }
    };
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Dashboard
  const processCallsData = (callsData: Call[]) => {
    if (!callsData || callsData.length === 0) return;

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalCalls = callsData.length;
    const successfulCalls = callsData.filter(call => call.callResult === "—É—Å–ø–µ—à–Ω—ã–π" || call.status === "—É—Å–ø–µ—à–Ω—ã–π").length;
    const unsuccessfulCalls = callsData.filter(call => call.callResult === "–Ω–µ—É—Å–ø–µ—à–Ω—ã–π" || call.status === "–Ω–µ—É—Å–ø–µ—à–Ω—ã–π").length;
    const attentionCalls = totalCalls - successfulCalls - unsuccessfulCalls;
    
    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let totalMinutes = 0;
    let totalSeconds = 0;
    let callsWithDuration = 0;
    
    callsData.forEach(call => {
      if (call.duration) {
        callsWithDuration++;
        const durationMatch = call.duration.match(/(\d+)–º\s*(\d*)—Å?/);
        if (durationMatch) {
          totalMinutes += parseInt(durationMatch[1], 10) || 0;
          totalSeconds += parseInt(durationMatch[2], 10) || 0;
        }
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—â–∏–µ —Å–µ–∫—É–Ω–¥—ã –∏ –∑–∞—Ç–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
    const totalTimeInSeconds = totalMinutes * 60 + totalSeconds;
    const avgTimeInSeconds = callsWithDuration > 0 ? Math.floor(totalTimeInSeconds / callsWithDuration) : 0;
    const avgMinutes = Math.floor(avgTimeInSeconds / 60);
    const avgSeconds = avgTimeInSeconds % 60;
    
    const successRate = totalCalls > 0 ? Math.round((successfulCalls / totalCalls) * 100) : 0;
    const unsuccessRate = totalCalls > 0 ? Math.round((unsuccessfulCalls / totalCalls) * 100) : 0;
    
    setStatsData([
      {
        title: "–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤",
        value: totalCalls.toString(),
        icon: <Phone className="h-4 w-4 text-muted-foreground" />,
        trend: { value: totalCalls, isPositive: true },
      },
      {
        title: "–£—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤",
        value: `${successRate}%`,
        icon: <CheckCircle className="h-4 w-4 text-success" />,
        trend: { value: successRate, isPositive: true },
      },
      {
        title: "–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤",
        value: `${unsuccessRate}%`,
        icon: <XCircle className="h-4 w-4 text-destructive" />,
        trend: { value: unsuccessRate, isPositive: false },
      },
      {
        title: "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        value: `${avgMinutes}–º ${avgSeconds}—Å`,
        icon: <Clock className="h-4 w-4 text-muted-foreground" />,
        trend: { value: avgTimeInSeconds, isPositive: avgTimeInSeconds > 0 },
      },
    ]);

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const callsByDay: Record<string, { successful: number, unsuccessful: number, attention: number }> = {
      "–ü–Ω": { successful: 0, unsuccessful: 0, attention: 0 },
      "–í—Ç": { successful: 0, unsuccessful: 0, attention: 0 },
      "–°—Ä": { successful: 0, unsuccessful: 0, attention: 0 },
      "–ß—Ç": { successful: 0, unsuccessful: 0, attention: 0 },
      "–ü—Ç": { successful: 0, unsuccessful: 0, attention: 0 },
      "–°–±": { successful: 0, unsuccessful: 0, attention: 0 },
      "–í—Å": { successful: 0, unsuccessful: 0, attention: 0 },
    };
    
    callsData.forEach(call => {
      if (!call.date) return;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
      const dateParts = call.date.split('.');
      if (dateParts.length === 3) {
        const day = parseInt(dateParts[0], 10);
        const month = parseInt(dateParts[1], 10) - 1;
        const year = parseInt(dateParts[2], 10);
        const date = new Date(year, month, day);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Ç.–¥.)
        const dayOfWeek = date.getDay();
        const dayNames = ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"];
        const dayName = dayNames[dayOfWeek];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        if (call.callResult === "—É—Å–ø–µ—à–Ω—ã–π" || call.status === "—É—Å–ø–µ—à–Ω—ã–π") {
          callsByDay[dayName].successful += 1;
        } else if (call.callResult === "–Ω–µ—É—Å–ø–µ—à–Ω—ã–π" || call.status === "–Ω–µ—É—Å–ø–µ—à–Ω—ã–π") {
          callsByDay[dayName].unsuccessful += 1;
        } else {
          callsByDay[dayName].attention += 1;
        }
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const newChartData = Object.entries(callsByDay)
      .filter(([day]) => ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç"].includes(day)) // –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
      .map(([day, data]) => ({
        name: day,
        —É—Å–ø–µ—à–Ω—ã–µ: data.successful,
        –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ: data.unsuccessful,
        "—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è": data.attention
      }));
    
    setChartData(newChartData);

    // 3. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–±–ª–µ–º
    const problemTags: Record<string, number> = {};
    
    callsData.forEach(call => {
      if (call.callResult === "–Ω–µ—É—Å–ø–µ—à–Ω—ã–π" || call.status === "–Ω–µ—É—Å–ø–µ—à–Ω—ã–π") {
        if (call.tags && Array.isArray(call.tags)) {
          call.tags.forEach(tag => {
            if (typeof tag === 'string') {
              problemTags[tag] = (problemTags[tag] || 0) + 1;
            }
          });
        }
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const newIssuesData = Object.entries(problemTags)
      .map(([issue, count], index) => ({
        id: index + 1,
        issue,
        count,
        impact: count > 10 ? "high" : count > 5 ? "medium" : "low"
      } as const))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5); // –¢–æ–ª—å–∫–æ —Ç–æ–ø-5
    
    setIssuesData(newIssuesData.length > 0 ? newIssuesData : [{ id: 1, issue: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", count: 0, impact: "low" as const }]);

    // 4. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—Ö–æ–≤
    const successTags: Record<string, number> = {};
    
    callsData.forEach(call => {
      if (call.callResult === "—É—Å–ø–µ—à–Ω—ã–π" || call.status === "—É—Å–ø–µ—à–Ω—ã–π") {
        if (call.tags && Array.isArray(call.tags)) {
          call.tags.forEach(tag => {
            if (typeof tag === 'string') {
              successTags[tag] = (successTags[tag] || 0) + 1;
            }
          });
        }
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const newSuccessData = Object.entries(successTags)
      .map(([issue, count], index) => ({
        id: index + 1,
        issue,
        count,
        impact: count > 10 ? "high" : count > 5 ? "medium" : "low"
      } as const))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5); // –¢–æ–ª—å–∫–æ —Ç–æ–ø-5
    
    setSuccessData(newSuccessData.length > 0 ? newSuccessData : [{ id: 1, issue: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", count: 0, impact: "low" as const }]);

    // 5. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–≤–æ–Ω–∫–∏
    const latestCalls = [...callsData]
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        if (!a.date || !b.date) return 0;
        if (a.date > b.date) return -1;
        if (a.date < b.date) return 1;
        if (!a.time || !b.time) return 0;
        if (a.time > b.time) return -1;
        if (a.time < b.time) return 1;
        return 0;
      })
      .slice(0, 5);
    
    setRecentCalls(latestCalls);

    // 6. –ê–Ω–∞–ª–∏–∑ LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–≤–æ–Ω–∫–æ–≤
    const keyInsights: string[] = [];
    const recommendations: string[] = [];
    
    callsData.forEach(call => {
      if (call.keyInsight && !keyInsights.includes(call.keyInsight)) {
        keyInsights.push(call.keyInsight);
      }
      if (call.recommendation && !recommendations.includes(call.recommendation)) {
        recommendations.push(call.recommendation);
      }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    setLlmAnalysis({
      title: "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–æ–≤",
      summary: `–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ${totalCalls} –∑–≤–æ–Ω–∫–æ–≤ –≤—ã—è–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é.`,
      insights: [
        {
          title: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤",
          content: `–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${successRate}%. –°—Ä–µ–¥–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ ${successfulCalls} –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–º–∏, ${unsuccessfulCalls} –Ω–µ—É—Å–ø–µ—à–Ω—ã–º–∏, –∏ ${attentionCalls} —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.`
        },
        {
          title: "–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã",
          content: keyInsights.length > 0 
            ? keyInsights.slice(0, 2).join(". ") 
            : "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–æ–Ω–∫–æ–≤."
        },
        {
          title: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
          content: recommendations.length > 0 
            ? recommendations.slice(0, 2).join(". ") 
            : "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –∑–≤–æ–Ω–∫–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏."
        }
      ]
    });

    // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥)
    const managerStats: Record<string, { 
      total: number, 
      successful: number, 
      average_score: number,
      count_with_score: number
    }> = {};

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–≤–æ–Ω–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    callsData.forEach(call => {
      const manager = call.agent || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
      if (!managerStats[manager]) {
        managerStats[manager] = { 
          total: 0, 
          successful: 0, 
          average_score: 0,
          count_with_score: 0 
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      managerStats[manager].total += 1;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
      if (call.callResult === "—É—Å–ø–µ—à–Ω—ã–π" || call.status === "—É—Å–ø–µ—à–Ω—ã–π") {
        managerStats[manager].successful += 1;
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ
      if (call.score) {
        managerStats[manager].average_score += call.score;
        managerStats[manager].count_with_score += 1;
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const newManagersData = Object.entries(managerStats)
      .map(([manager, data]) => {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏ —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
        const successRate = data.total > 0 ? (data.successful / data.total) * 100 : 0;
        const avgScore = data.count_with_score > 0 ? data.average_score / data.count_with_score : 0;
        
        return {
          name: manager,
          —É—Å–ø–µ—à–Ω—ã–µ: Math.round(successRate),
          —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: Math.round(avgScore * 10) / 10,
          –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: data.total
        };
      })
      .sort((a, b) => b.—É—Å–ø–µ—à–Ω—ã–µ - a.—É—Å–ø–µ—à–Ω—ã–µ)
      .slice(0, 8); // –ë–µ—Ä–µ–º —Ç–æ–ø-8 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    
    setManagersData(newManagersData);

    // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–ª–∏—è–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const durationGroups = [
      { name: "0-1 –º–∏–Ω", min: 0, max: 1, data: { –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0, —É—Å–ø–µ—à–Ω—ã–µ: 0, —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: 0 } },
      { name: "1-3 –º–∏–Ω", min: 1, max: 3, data: { –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0, —É—Å–ø–µ—à–Ω—ã–µ: 0, —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: 0 } },
      { name: "3-5 –º–∏–Ω", min: 3, max: 5, data: { –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0, —É—Å–ø–µ—à–Ω—ã–µ: 0, —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: 0 } },
      { name: "5-10 –º–∏–Ω", min: 5, max: 10, data: { –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0, —É—Å–ø–µ—à–Ω—ã–µ: 0, —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: 0 } },
      { name: ">10 –º–∏–Ω", min: 10, max: Number.MAX_SAFE_INTEGER, data: { –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0, —É—Å–ø–µ—à–Ω—ã–µ: 0, —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: 0 } }
    ];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–≤–æ–Ω–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    callsData.forEach(call => {
      if (!call.duration) return;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
      let durationMinutes = 0;
      const durationMatch = call.duration.match(/(\d+)–º\s*(\d*)—Å?/);
      if (durationMatch) {
        const minutes = parseInt(durationMatch[1], 10) || 0;
        const seconds = parseInt(durationMatch[2], 10) || 0;
        durationMinutes = minutes + seconds / 60;
      }

      // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –¥–ª—è —ç—Ç–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const group = durationGroups.find(g => durationMinutes >= g.min && durationMinutes < g.max);
      if (!group) return;

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      group.data.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ += 1;
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–≤–æ–Ω–∫–∞
      if (call.callResult === "—É—Å–ø–µ—à–Ω—ã–π" || call.status === "—É—Å–ø–µ—à–Ω—ã–π") {
        group.data.—É—Å–ø–µ—à–Ω—ã–µ += 1;
      }

      // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–≤–æ–Ω–∫–∞
      if (call.score) {
        group.data.—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞ += call.score;
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const newDurationData = durationGroups.map(group => {
      const totalCalls = group.data.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ;
      const successRate = totalCalls > 0 ? (group.data.—É—Å–ø–µ—à–Ω—ã–µ / totalCalls) * 100 : 0;
      const avgScore = totalCalls > 0 ? group.data.—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞ / totalCalls : 0;
      
      return {
        name: group.name,
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: totalCalls,
        –∫–æ–Ω–≤–µ—Ä—Å–∏—è: Math.round(successRate),
        —Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞: Math.round(avgScore * 10) / 10
      };
    });
    
    setDurationData(newDurationData);
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const handleRefreshData = () => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentCalls = globalState.getCurrentCalls();
    if (currentCalls.length > 0) {
      console.log('üìä Dashboard: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      setCalls(currentCalls);
      processCallsData(currentCalls);
      toast({
        title: "–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω",
        description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${currentCalls.length} –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è`,
      });
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
      console.log('üìä Dashboard: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API');
      loadAndProcessCalls(true, false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-200px)]">
        <div className="text-center">
          <Loader2 className="h-12 w-12 mx-auto mb-4 animate-spin text-primary" />
          <p className="text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center text-red-500 py-10">
        <p className="text-xl mb-2">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö</p>
        <p>{error}</p>
      </div>
    );
  }

  if (calls.length === 0) {
    return (
      <div className="text-center py-10">
        <p className="text-xl mb-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö</p>
        <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ –∑–≤–æ–Ω–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤</h2>
          <p className="text-muted-foreground">
            –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤
          </p>
        </div>
        <div className="flex items-center gap-2">
          <button 
            onClick={handleRefreshData} 
            className="flex items-center gap-2 px-4 py-2 rounded-md bg-primary text-white hover:bg-primary/90 transition-colors"
          >
            <ChartBar className="h-4 w-4" />
            –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="mb-6">
          <TabsTrigger value="overview">–û–±–∑–æ—Ä</TabsTrigger>
          <TabsTrigger value="comparison">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ</TabsTrigger>
          <TabsTrigger value="training">–û–±—É—á–µ–Ω–∏–µ</TabsTrigger>
          <TabsTrigger value="alerts">–û–ø–æ–≤–µ—â–µ–Ω–∏—è</TabsTrigger>
        </TabsList>
        
        {/* –í–∫–ª–∞–¥–∫–∞ –æ–±–∑–æ—Ä–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ */}
        <TabsContent value="overview" className="space-y-6">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        {statsData.map((stat, index) => (
          <StatCard
            key={index}
            title={stat.title}
            value={stat.value}
            icon={stat.icon}
            trend={stat.trend}
          />
        ))}
      </div>

          {/* –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ */}
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
            {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ */}
            <Card>
              <CardHeader>
                <div className="flex items-center gap-2">
                  <Users className="h-5 w-5 text-primary" />
                  <CardTitle className="text-lg font-medium">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤</CardTitle>
                </div>
                <CardDescription>
                  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
                </CardDescription>
              </CardHeader>
              <CardContent className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    layout="vertical"
                    data={managersData}
                    margin={{ top: 10, right: 40, left: 40, bottom: 10 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" horizontal={false} />
                    <XAxis
                      type="number"
                      tickLine={false}
                      axisLine={false}
                      domain={[0, 100]}
                      tickFormatter={(value) => `${value}%`}
                    />
                    <YAxis
                      dataKey="name"
                      type="category"
                      tickLine={false}
                      axisLine={false}
                      width={80}
                    />
                    <Tooltip
                      formatter={(value, name) => {
                        if (name === "—É—Å–ø–µ—à–Ω—ã–µ") return [`${value}%`, "–£—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏"];
                        if (name === "—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞") return [`${value}`, "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞"];
                        return [value, name];
                      }}
                    />
                    <Legend />
                    <Bar 
                      dataKey="—É—Å–ø–µ—à–Ω—ã–µ" 
                      fill="#22c55e" 
                      radius={[0, 4, 4, 0]}
                      name="–£—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ (%)"
                    />
                    <Bar 
                      dataKey="—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞" 
                      fill="#3b82f6" 
                      radius={[0, 4, 4, 0]}
                      name="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞"
                    />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
            <Card>
              <CardHeader>
                <div className="flex items-center gap-2">
                  <Clock className="h-5 w-5 text-primary" />
                  <CardTitle className="text-lg font-medium">–í–ª–∏—è–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</CardTitle>
                </div>
                <CardDescription>
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                </CardDescription>
              </CardHeader>
              <CardContent className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={durationData}
                    margin={{
                      top: 10,
                      right: 20,
                      left: 10,
                      bottom: 10,
                    }}
                  >
                    <CartesianGrid strokeDasharray="3 3" vertical={false} />
                    <XAxis
                      dataKey="name"
                      tickLine={false}
                      axisLine={false}
                      fontSize={12}
                    />
                    <YAxis
                      yAxisId="left"
                      orientation="left"
                      tickLine={false}
                      axisLine={false}
                      fontSize={12}
                    />
                    <YAxis
                      yAxisId="right"
                      orientation="right"
                      tickLine={false}
                      axisLine={false}
                      fontSize={12}
                      tickFormatter={(value) => `${value}%`}
                    />
                    <Tooltip />
                    <Legend />
                    <Bar
                      yAxisId="left"
                      dataKey="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                      fill="#94a3b8"
                      radius={[4, 4, 0, 0]}
                      name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤"
                    />
                    <Bar
                      yAxisId="right"
                      dataKey="–∫–æ–Ω–≤–µ—Ä—Å–∏—è"
                      fill="#22c55e"
                      radius={[4, 4, 0, 0]}
                      name="–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)"
                    />
                    <Bar
                      yAxisId="right"
                      dataKey="—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞"
                      fill="#3b82f6"
                      radius={[4, 4, 0, 0]}
                      name="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞"
                    />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>

      {/* LLM Analysis Section */}
      <Card className="border-primary/20 shadow-sm">
        <CardHeader className="bg-slate-50 border-b">
          <div className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-primary" />
            <CardTitle className="text-lg font-medium">{llmAnalysis.title}</CardTitle>
          </div>
          <CardDescription>
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="space-y-4">
            <p className="text-muted-foreground">{llmAnalysis.summary}</p>
            <div className="grid gap-4 md:grid-cols-3">
              {llmAnalysis.insights.map((insight, index) => (
                <div key={index} className="rounded-lg border bg-card p-4">
                  <h3 className="font-semibold mb-2">{insight.title}</h3>
                  <p className="text-sm text-muted-foreground">{insight.content}</p>
                </div>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="grid gap-4 md:grid-cols-2">
        <AnalyticsChart
          title="–î–∏–Ω–∞–º–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é"
          data={chartData}
        />
        <div className="grid grid-rows-2 gap-4">
          <IssuesTable
            data={issuesData}
            title="–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
          />
          <IssuesTable
            data={successData}
            title="–§–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞"
          />
        </div>
      </div>

      <div className="grid gap-4 md:grid-cols-2">
        <ChatAnalytics />
        <CallsTable
          calls={recentCalls}
          title="–ù–µ–¥–∞–≤–Ω–∏–µ –∑–≤–æ–Ω–∫–∏"
          description="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"
        />
      </div>
        </TabsContent>
        
        {/* –í–∫–ª–∞–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ */}
        <TabsContent value="comparison" className="space-y-6">
          <CallsComparison 
            calls={selectedCallsForComparison}
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤"
            description="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
          />
          
          <Card>
            <CardHeader>
              <CardTitle className="text-lg font-medium">–í—ã–±–æ—Ä –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</CardTitle>
              <CardDescription>
                –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 5)
              </CardDescription>
            </CardHeader>
            <CardContent>
              <CallsTable
                calls={calls}
                title=""
                onCallSelect={(id, selected) => {
                  const call = calls.find(c => c.id === id);
                  if (call) handleSelectCallForComparison(call);
                }}
                selectedCallIds={selectedCallsForComparison.map(c => c.id)}
              />
            </CardContent>
          </Card>
        </TabsContent>
        
        {/* –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—É—á–µ–Ω–∏—é */}
        <TabsContent value="training" className="space-y-6">
          <TrainingRecommendations 
            calls={calls}
            title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"
            description="–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤"
          />
        </TabsContent>
        
        {/* –í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π */}
        <TabsContent value="alerts" className="space-y-6">
          <AlertsSystem
            calls={calls}
            title="–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö"
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π"
          />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default Dashboard;