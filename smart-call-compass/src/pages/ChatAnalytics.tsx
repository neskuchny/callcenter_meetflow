import React, { useState, useEffect } from 'react';
import AnalyticsChat from '@/components/analysis/AnalyticsChat';
import { fetchCalls } from '@/lib/api';
import { Call } from '@/components/calls/CallsTable';
import { globalState, EVENTS, CallsUpdatedEvent, DataSourceChangedEvent, AnalysisCompletedEvent } from '@/lib/globalState';
import { Loader2 } from 'lucide-react';

const ChatAnalytics = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [dashboardData, setDashboardData] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadDashboardData(useGlobalState = true) {
      try {
        setIsLoading(true);
        
        let calls: Call[];
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (useGlobalState) {
          const currentCalls = globalState.getCurrentCalls();
          if (currentCalls.length > 0) {
            console.log('üí¨ ChatAnalytics: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            calls = currentCalls;
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            const currentSource = globalState.getDataSource();
            calls = await fetchCalls(currentSource);
            console.log(`üí¨ ChatAnalytics: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º ${currentSource}`);
          }
        } else {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤–æ–Ω–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ API —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
          const currentSource = globalState.getDataSource();
          calls = await fetchCalls(currentSource);
          console.log(`üí¨ ChatAnalytics: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ API —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º ${currentSource}`);
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        const dashboardMetrics = calculateDashboardMetrics(calls);
        setDashboardData(dashboardMetrics);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞');
      } finally {
        setIsLoading(false);
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    loadDashboardData();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const handleCallsUpdated = (event: CallsUpdatedEvent) => {
      console.log('üí¨ ChatAnalytics: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤');
      const dashboardMetrics = calculateDashboardMetrics(event.detail.calls);
      setDashboardData(dashboardMetrics);
    };

    const handleDataSourceChanged = (event: DataSourceChangedEvent) => {
      console.log(`üí¨ ChatAnalytics: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${event.detail.source}`);
      const dashboardMetrics = calculateDashboardMetrics(event.detail.calls);
      setDashboardData(dashboardMetrics);
    };

    const handleAnalysisCompleted = (event: AnalysisCompletedEvent) => {
      console.log('üí¨ ChatAnalytics: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞');
      const dashboardMetrics = calculateDashboardMetrics(event.detail.allCalls);
      setDashboardData(dashboardMetrics);
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
    window.addEventListener(EVENTS.CALLS_UPDATED, handleCallsUpdated as EventListener);
    window.addEventListener(EVENTS.DATA_SOURCE_CHANGED, handleDataSourceChanged as EventListener);
    window.addEventListener(EVENTS.ANALYSIS_COMPLETED, handleAnalysisCompleted as EventListener);

    // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener(EVENTS.CALLS_UPDATED, handleCallsUpdated as EventListener);
      window.removeEventListener(EVENTS.DATA_SOURCE_CHANGED, handleDataSourceChanged as EventListener);
      window.removeEventListener(EVENTS.ANALYSIS_COMPLETED, handleAnalysisCompleted as EventListener);
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞
  const calculateDashboardMetrics = (calls: Call[]) => {
    if (!calls || calls.length === 0) return {};

    // 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤
    const totalCalls = calls.length;
    
    // 2. –£—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
    const successfulCalls = calls.filter(call => call.callResult === '—É—Å–ø–µ—à–Ω—ã–π' || call.status === '—É—Å–ø–µ—à–Ω—ã–π').length;
    const unsuccessfulCalls = calls.filter(call => call.callResult === '–Ω–µ—É—Å–ø–µ—à–Ω—ã–π' || call.status === '–Ω–µ—É—Å–ø–µ—à–Ω—ã–π').length;
    
    // 3. –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    const successRate = totalCalls > 0 ? Math.round((successfulCalls / totalCalls) * 100) : 0;
    const unsuccessRate = totalCalls > 0 ? Math.round((unsuccessfulCalls / totalCalls) * 100) : 0;
    
    // 4. –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let totalMinutes = 0;
    let totalSeconds = 0;
    let callsWithDuration = 0;
    
    calls.forEach(call => {
      if (call.duration) {
        callsWithDuration++;
        const durationMatch = call.duration.match(/(\d+)–º\s*(\d*)—Å?/);
        if (durationMatch) {
          totalMinutes += parseInt(durationMatch[1], 10) || 0;
          totalSeconds += parseInt(durationMatch[2], 10) || 0;
        }
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—â–∏–µ —Å–µ–∫—É–Ω–¥—ã –∏ –∑–∞—Ç–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
    const totalTimeInSeconds = totalMinutes * 60 + totalSeconds;
    const avgTimeInSeconds = callsWithDuration > 0 ? Math.floor(totalTimeInSeconds / callsWithDuration) : 0;
    const avgMinutes = Math.floor(avgTimeInSeconds / 60);
    const avgSeconds = avgTimeInSeconds % 60;
    
    // 5. –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const tags: Record<string, number> = {};
    calls.forEach(call => {
      if (call.tags && Array.isArray(call.tags)) {
        call.tags.forEach(tag => {
          if (typeof tag === 'string') {
            tags[tag] = (tags[tag] || 0) + 1;
          }
        });
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    const topTags = Object.entries(tags)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([tag, count]) => ({ tag, count }));
    
    // 6. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
    const problemReasons: Record<string, number> = {};
    calls.forEach(call => {
      if (call.callResult === '–Ω–µ—É—Å–ø–µ—à–Ω—ã–π' || call.status === '–Ω–µ—É—Å–ø–µ—à–Ω—ã–π') {
        if (call.tags && Array.isArray(call.tags)) {
          call.tags.forEach(tag => {
            if (typeof tag === 'string') {
              problemReasons[tag] = (problemReasons[tag] || 0) + 1;
            }
          });
        }
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    const topProblems = Object.entries(problemReasons)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([reason, count]) => ({ reason, count }));
    
    return {
      totalCalls,
      successfulCalls,
      unsuccessfulCalls, 
      successRate,
      unsuccessRate,
      avgDuration: `${avgMinutes}–º ${avgSeconds}—Å`,
      avgDurationInSeconds: avgTimeInSeconds,
      topTags,
      topProblems
    };
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-200px)]">
        <div className="text-center">
          <Loader2 className="h-12 w-12 mx-auto mb-4 animate-spin text-primary" />
          <p className="text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center text-red-500 py-10">
        <p className="text-xl mb-2">–û—à–∏–±–∫–∞</p>
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold tracking-tight">–ß–∞—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π</h2>
        <p className="text-muted-foreground">
          –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–≤–æ–Ω–∫–∞—Ö, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ö –∏–ª–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        </p>
      </div>
      
      <AnalyticsChat dashboardData={dashboardData} />
    </div>
  );
};

export default ChatAnalytics; 