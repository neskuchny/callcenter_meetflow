import { Call } from '@/components/calls/CallsTable';

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
export interface GlobalState {
  currentCalls: Call[];
  dataSource: 'all' | 'cloud' | 'local';
  selectedCallIds: string[];
  lastUpdated: Date;
}

// –ö–ª—é—á–∏ —Å–æ–±—ã—Ç–∏–π
export const EVENTS = {
  CALLS_UPDATED: 'calls-updated',
  DATA_SOURCE_CHANGED: 'data-source-changed',
  CALLS_SELECTED: 'calls-selected',
  ANALYSIS_COMPLETED: 'analysis-completed'
} as const;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π
export interface CallsUpdatedEvent extends CustomEvent {
  detail: {
    calls: Call[];
    source: 'all' | 'cloud' | 'local';
    selectedIds?: string[];
  };
}

export interface DataSourceChangedEvent extends CustomEvent {
  detail: {
    source: 'all' | 'cloud' | 'local';
    calls: Call[];
  };
}

export interface CallsSelectedEvent extends CustomEvent {
  detail: {
    selectedIds: string[];
    calls: Call[];
  };
}

export interface AnalysisCompletedEvent extends CustomEvent {
  detail: {
    analyzedCalls: Call[];
    allCalls: Call[];
    source: 'all' | 'cloud' | 'local';
  };
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
export class GlobalStateManager {
  private static instance: GlobalStateManager;
  private state: GlobalState = {
    currentCalls: [],
    dataSource: 'all',
    selectedCallIds: [],
    lastUpdated: new Date()
  };

  private constructor() {}

  static getInstance(): GlobalStateManager {
    if (!GlobalStateManager.instance) {
      GlobalStateManager.instance = new GlobalStateManager();
    }
    return GlobalStateManager.instance;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
  updateCalls(calls: Call[], source: 'all' | 'cloud' | 'local') {
    this.state = {
      ...this.state,
      currentCalls: calls,
      dataSource: source,
      lastUpdated: new Date()
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const event = new CustomEvent(EVENTS.CALLS_UPDATED, {
      detail: {
        calls,
        source,
        selectedIds: this.state.selectedCallIds
      }
    }) as CallsUpdatedEvent;
    
    window.dispatchEvent(event);
    console.log(`üîÑ GlobalState: –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–≤–æ–Ω–∫–∏ (${calls.length} —à—Ç., –∏—Å—Ç–æ—á–Ω–∏–∫: ${source})`);
  }

  // –°–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  changeDataSource(source: 'all' | 'cloud' | 'local', calls: Call[]) {
    this.state = {
      ...this.state,
      dataSource: source,
      currentCalls: calls,
      selectedCallIds: [], // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      lastUpdated: new Date()
    };

    const event = new CustomEvent(EVENTS.DATA_SOURCE_CHANGED, {
      detail: { source, calls }
    }) as DataSourceChangedEvent;
    
    window.dispatchEvent(event);
    console.log(`üìä GlobalState: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${source} (${calls.length} –∑–∞–ø–∏—Å–µ–π)`);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
  updateSelection(selectedIds: string[]) {
    this.state = {
      ...this.state,
      selectedCallIds: selectedIds,
      lastUpdated: new Date()
    };

    const event = new CustomEvent(EVENTS.CALLS_SELECTED, {
      detail: {
        selectedIds,
        calls: this.state.currentCalls
      }
    }) as CallsSelectedEvent;
    
    window.dispatchEvent(event);
    console.log(`‚úÖ GlobalState: –û–±–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä –∑–≤–æ–Ω–∫–æ–≤ (${selectedIds.length} –≤—ã–±—Ä–∞–Ω–æ)`);
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
  completeAnalysis(analyzedCalls: Call[]) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–≤–æ–Ω–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    const updatedCalls = this.state.currentCalls.map(call => {
      const analyzedCall = analyzedCalls.find(ac => ac.id === call.id);
      return analyzedCall ? { ...call, ...analyzedCall } : call;
    });

    this.state = {
      ...this.state,
      currentCalls: updatedCalls,
      lastUpdated: new Date()
    };

    const event = new CustomEvent(EVENTS.ANALYSIS_COMPLETED, {
      detail: {
        analyzedCalls,
        allCalls: updatedCalls,
        source: this.state.dataSource
      }
    }) as AnalysisCompletedEvent;
    
    window.dispatchEvent(event);
    console.log(`üß† GlobalState: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (${analyzedCalls.length} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): GlobalState {
    return { ...this.state };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
  getCurrentCalls(): Call[] {
    return [...this.state.currentCalls];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
  getSelectedCalls(): Call[] {
    return this.state.currentCalls.filter(call => 
      this.state.selectedCallIds.includes(call.id)
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  getDataSource(): 'all' | 'cloud' | 'local' {
    return this.state.dataSource;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const globalState = GlobalStateManager.getInstance();
